import numpy as np
import tensorflow as tf
import tkinter as tk
from tkinter import filedialog
from PIL import Image, ImageTk
from tensorflow.keras.models import load_model  # type: ignore
from tensorflow.keras.preprocessing.image import load_img, img_to_array # type: ignore

model = load_model('pre_trained_model/Cifar10_CNN_model.h5')
Label = ['airplane', 'Car', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck']

class live_image:
  
  def __init__(self, root):
      self.root = root
      self.root.geometry("500x500")
      self.root.title("Cifar_model")
      self.root.resizable(False, False)
      
      self.picture_label = tk.Label(root)
      self.picture_label.place(x = 10, y = 10, width = 480, height = 300)
      
      self.result_label = tk.Label(root, text = "Prediction: None", font = ("arial", 16), anchor = "center")
      self.result_label.place(x = 60, y = 380, width = 400, height = 50)

      self.Open_image_button = tk.Button(root, text = "Select Image" , command = self.open_file, font = ("arial", 16))
      self.Open_image_button.place(x = 280, y = 450, width = 150, height = 25)
      
      self.clear_button = tk.Button(root, text = "Clear Image", command = self.Clear, font = ("arial", 16))
      self.clear_button.place(x = 80, y = 450, width = 150, height = 25)
      
  def Clear(self):
    
    self.picture_label.config(image="")
    self.picture_label.image = None
    self.result_label.config(text = "Prediction: None")
      
  def open_file(self):
    
    self.filepath = filedialog.askopenfilename(filetypes = (("JPG File", "*.jpg"),("PNG File", "*.png")))

    
    if self.filepath:
      
      self.Image = Image.open(self.filepath)
      self.Image = self.Image.resize((480, 350))
      image = ImageTk.PhotoImage(self.Image)
      self.picture_label.config(image = image)
      self.picture_label.Image = image
      
      self.prediction(self.filepath)
          
  def prediction(self, file_path):
  
    input_data = self.preprocess_image(file_path)

    prediction = model.predict(input_data)

    class_prediction = np.argmax(prediction)
  
    accuracy = prediction[0][class_prediction] * 100 
    
    self.result_label.config(text = f"Prediction: {Label[class_prediction]} (Accuracy: {accuracy:.2f} %")
  
  
  def preprocess_image(self, input_image, target_size = (32,32)):
  
    data_image = load_img(input_image, target_size = target_size, color_mode = 'rgb')
    data_image = img_to_array(data_image) / 255.0
    data_image = np.expand_dims(data_image, axis = 0)

    return data_image 
                
if __name__ == "__main__":
  
  root = tk.Tk()
  app = live_image(root)
  root.mainloop()
  
  